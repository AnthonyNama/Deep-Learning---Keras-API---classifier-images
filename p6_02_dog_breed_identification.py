# -*- coding: utf-8 -*-
"""P6_02_Dog_Breed_Identification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LRvnGGArXG3KgyMjdTBF8bCmapmejz2G
"""

import cv2
import pickle
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.image import load_img, img_to_array

dir_model = 'drive/My Drive/Colab Notebooks/P6/data/model/'

dir_train = 'drive/My Drive/Colab Notebooks/P6/data/train'

root_data = 'drive/My Drive/Colab Notebooks/P6/data/'

def save_obj(obj, name):
    with open('obj/'+ name + '.pkl', 'wb') as f:
        pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)

def load_obj(name):
    with open(root_data + 'obj/' + name + '.pkl', 'rb') as f:
        return pickle.load(f)

model = tf.keras.models.load_model(dir_model + "my_inceptionResNetV2.h5")

class_indices = load_obj('class_indices')

def equalHist(img, adaptive=True):
    img = img.astype(np.uint8)
    ycrcb=cv2.cvtColor(img,cv2.COLOR_BGR2YCR_CB)
    channels=cv2.split(ycrcb)
    if adaptive:
        clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
        channels[0] = clahe.apply(channels[0])
    else:
        channels[0] = cv2.equalizeHist(channels[0])
        ycrcb = cv2.merge(channels)
        img = cv2.cvtColor(ycrcb,cv2.COLOR_YCR_CB2BGR)
    return img

def preprocessing_image(img):
    img = equalHist(img)
    img = tf.keras.applications.inception_resnet_v2.preprocess_input(img)
    return img

def predict(img):
    return model.predict(np.array([img]))

def decode_predictions(y, top):
    res = []
    y = y[0]
    predicted = y.argsort()[-top:][::-1]
    for x in predicted:
        for k,v in class_indices.itempredict(img)s():
            if x == v:
                res.append((k, y[x]))
    print("Top {} : {}".format(top, res))

def dogBreedIdentification(img, top=1):
    img = preprocessing_image(img)
    y = predict(img)
    decode_predictions(y, top)

train_df = load_obj('train_df')

example_df = train_df.sample(n=1).reset_index(drop=True)
img = img_to_array(load_img(dir_train + "/" + example_df.loc[0, 'filename']))

dogBreedIdentification(img, top=2)